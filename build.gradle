buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'idea'

idea {
    module {
        excludeDirs += [file("out"), file('.idea'), file("build"), file("gradle")]
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    group = 'be.cegeka.vteam.axkeleton'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8


    repositories {
        mavenCentral()
    }

    ext {
        axon_version = '3.0.7'
        jackson_version = '2.6.3'
        spring_version = '4.3.12.RELEASE'
    }

    dependencies {
        compile "org.axonframework:axon-spring-boot-autoconfigure:$axon_version"

        compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

        testCompile "junit:junit:4.12"
        testCompile "org.axonframework:axon-test:$axon_version"
    }

    idea {
        module {
            outputDir file("$rootDir/out/production/$name")
            testOutputDir file("$rootDir/out/test/$name")
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

ext {
    baselineNames = ["benoit"]
}
task generateBaseline {

    def rootPackage = allprojects.find { it.name == "application" }.property("group")
    def packageDir = rootPackage.replaceAll("\\.", "/")

    doLast {
        baselineNames.forEach {

            def className = it.capitalize() + "Configuration"

            mkdir "$rootDir/$it/src/main/java/$packageDir"
            if (!file("$rootDir/$it/src/main/java/$packageDir/${className}.java").exists()) {
                file("$rootDir/$it/src/main/java/$packageDir/${className}.java").text =
                        """package be.cegeka.vteam.axkeleton;

import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("$it")
public class $className {
    
}
"""
            }
            mkdir "$rootDir/$it/src/main/resources"
            mkdir "$rootDir/$it/src/test/java"
            mkdir "$rootDir/$it/src/test/resources"
            if (!file("$rootDir/$it/build.gradle").exists()) {
                file("$rootDir/$it/build.gradle").text =
                        """dependencies {
    compile "org.springframework:spring-context:4.3.12.RELEASE"
    compile project(":api")
}
"""
            }
            def settings = new File("$rootDir/settings.gradle").text
            if (!settings.contains("include '$it'")) {
                new File("$rootDir/settings.gradle").append("\ninclude '$it'")
            }
        }
    }
}

task cleanupBaseline {
    doLast {
        baselineNames.forEach {

            delete "$rootDir/$it"
//            def settings = new File("$rootDir/settings.gradle").filterLine { "include '$it'" != it }
//            new File("$rootDir/settings.gradle").text = settings

        }
    }
}